version: 2

jobs:
  style-and-audit:
    docker:
      - image: circleci/rust
        environment:
          CARGO_HOME: /home/circleci/.cargo
    steps:
      - checkout
      - run:
          name: Install Cargo Extensions
          command: |
            cargo install --quiet cargo-audit || true
            rustup component add rustfmt clippy || true
      - run:
          name: Rust formatting
          command: |
            cargo fmt --all -- --check
      - run:
          name: Clippy linting
          command: |
            cargo clippy --all-targets --all-features -- -D warnings
      - run:
          name: Audit dependencies
          command: cargo audit

  coverage:
      machine: true
      steps:
        - checkout
        - run:
            name: Coverage using docker
            # should we be using this guy's docker image
            command: docker run --security-opt seccomp=unconfined -v "${PWD}:/volume" xd009642/tarpaulin


  build-test:
    docker:
      - image: circleci/rust
        environment:
          CARGO_HOME: /home/circleci/.cargo
    resource_class: medium+
    steps:
      - checkout
      - run:
          name: Install Redis
          command: |
            sudo apt-get update
            sudo apt-get install redis-server
            redis-server --version
      - run:
          name: Install Node.js, Ganache CLI, and XRP Engine
          command: |
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
              source ~/.nvm/nvm.sh
              nvm install node
              npm i -g ganache-cli ilp-settlement-xrp
      - run:
          name: Reduce codegen units
          # If we don't include this, the linker runs out of memory when building
          # the project on CI. We don't include this normally though because
          # it should be able to build with more units on other machines
          command: printf "[profile.dev]\ncodegen-units = 1\n" >> Cargo.toml
      - run:
          name: Build
          command: cargo build --all-features --all-targets
      - run:
          name: Test
          # Note the timeout is included to make sure that they
          # do not run for more than 10 minutes under any circumstances
          # (We have had issues with bugs causing the tests to "run"
          # for 5 hours, wasting a ton of compute credits)
          command: |
            source ~/.nvm/nvm.sh
            timeout 10m cargo test --all --all-features
          environment:
            RUST_BACKTRACE: "1"

workflows:
  version: 2
  build-test-check:
    jobs:
      - style-and-audit
      - build-test
      - coverage